"
"=========================================================================
" .vimrc
" Settings for VIM
"==========================================================================

"==========================================================================
" Initialization
"==========================================================================
set shell=zsh
let mapleader = "\<Space>"

" Define plugin dir locations
if has('nvim')
  let vimplug = "$USER_DATA_HOME/nvim/site/autoload/plug.vim"
  let plugged = "$USER_DATA_HOME/nvim/plugged"
else
  let vimplug = "~/.vim/autoload/plug.vim"
  let plugged = "~/.vim/plugged"
endif

"==========================================================================
" Plugins
" Using vim-plug
"==========================================================================

" Auto install vim-plug if it doesn't already exist.
if empty(glob(vimplug))
  execute '!curl -fLo ' . vimplug . ' --create-dirs '
    \ . 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall
endif

call plug#begin(plugged)

" Browsing
Plug 'tpope/vim-vinegar'  " enhanced netrw file browser
Plug 'majutsushi/tagbar'  " display tags in a window

" Colorscheme
" Plug 'joshdick/onedark.vim'
Plug 'rakr/vim-one'
" Plug 'rakr/vim-two-firewatch'
" Plug 'chriskempson/base16-vim'
" Plug 'sonph/onehalf', { 'rtp': 'vim/' }

" Completion
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'

" Search and replace
Plug 'mileszs/ack.vim' " Can support ag or rg too.
Plug 'gabesoft/vim-ags'        " Fast find/replace across all files.
" The fzf binary is installed by nix.
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'


" Editing Enhancement
" Plug 'mbbill/undotree'         " Visual navigation of VIM undotree
Plug 'tpope/vim-surround'      " Easy handling of surrounding brackets etc.
Plug 'jiangmiao/auto-pairs'    " Automatic closing of parentheses etc.
Plug 'junegunn/vim-easy-align' " Easy alignment of text blocks
Plug 'tpope/vim-commentary'    " Easy toggling of comment markers
Plug 'tpope/vim-repeat'        " Make vim-surround and vim-commentary repeatable

" Source Code Management Tools
Plug 'tpope/vim-fugitive'      " git integration for VIM
Plug 'airblade/vim-gitgutter'  " display git diffs in the gutter
" Plug 'neomake/neomake'         " syntax checking + building
Plug 'w0rp/ale'                " buffer syntax checking, conflicts with neomake

" Syntax Highlighting
Plug 'ntpeters/vim-better-whitespace'
" Filetype Specific
" One disadvantage of selective loading is that help files are unavailable
" when working on a different file-type.  This is an minor annoyance when
" configuring a plugin while the init file is open. Most filetype specific
" plugins tend to not load very much initially, so it could be
" advantageous to load all plugins.
" use vim-latex instead?
Plug 'kopischke/fish.vim',   { 'for': 'fish' }
Plug 'LnL7/vim-nix',         { 'for': 'nix' }
Plug 'lervag/vimtex',        { 'for': 'tex' }
Plug 'derekwyatt/vim-scala', { 'for': 'scala' }
Plug 'fatih/vim-go',         { 'for': 'go' }
" Plug 'chrisbra/csv.vim',     { 'for': 'csv' }
Plug 'cespare/vim-toml',     { 'for': 'toml' }
Plug 'mattn/emmet-vim',      { 'for': 'html' }
Plug 'othree/html5.vim',     { 'for': 'html' }
Plug 'Vimjas/vim-python-pep8-indent', { 'for': 'python' }
" Plug 'python-mode/python-mode', { 'for': 'python' }
Plug 'mindriot101/vim-yapf' " python autoformatter
" lazy-loading the julia-vim plugin causes issues
Plug 'JuliaLang/julia-vim'
" Plug 'ensime/ensime-vim' " had issues getting ensime to work

" Neovim specific plugins
" FIXME: find a better way to separate neovim/vim plugins.  Ideally we do not
" maintain separate files, either.
if has('nvim')
  function! DoRemote(arg)
    UpdateRemotePlugins
  endfunction
  Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
  " Plug 'Shougo/echodoc.vim' " Displaying preview-like info
  Plug 'nsf/gocode', { 'rtp': 'nvim', 'do': '$USER_DATA_HOME/nvim/plugged/gocode/nvim/symlink.sh' }
  Plug 'zchee/deoplete-go', { 'do': 'make' }
  Plug 'zchee/deoplete-jedi'
  Plug 'drinksober/nvim-yapf-formater' " 2016-08-10T13:08:28-0700 immature
endif

" Vim only filetype specific plugins
if !has('nvim')
  " Plugins can go here.
endif

" Other
" Plug 'Shougo/unite.vim'

" Visual
" lightline is a simpler version of airline, but both are likely superfluous.
" Plug 'itchyny/lightline.vim'
" Plug 'bling/vim-bufferline'

call plug#end()

" ==========================================================================
" PLUGIN CONFIG
" ==========================================================================
"
" --------------------------------------------------------------------------
" ack
" --------------------------------------------------------------------------
if executable('rg')
  let g:ackprg = 'rg --vimgrep --no-heading -uuu'
endif

" --------------------------------------------------------------------------
" ale
" --------------------------------------------------------------------------
" let g:ale_linters = {
"       \ 'python': ['flake8']
"       \ }
let g:ale_sign_error = "✖" " ☓⚐
let g:ale_sign_warning = "⚠"
let g:ale_echo_msg_format = '[%linter%] [%severity%] %s'
let g:ale_open_list = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 0
let g:ale_lint_on_text_changed = 'never'
nmap <leader>lint <Plug>(ale_lint)
nmap <leader>lj <Plug>(ale_next_wrap)
nmap <leader>lk <Plug>(ale_previous_wrap)

" --------------------------------------------------------------------------
" netrw (built-in)
" --------------------------------------------------------------------------
" let g:netrw_banner    = 0      " Do not display info on top
let g:netrw_liststyle = 3      " default to tree-style file listing
let g:netrw_winsize   = 30     " use 30% of columns for list
let g:netrw_preview   = 1      " default to vertical splitting for preview

" Hit enter in the file browser to open the selected
" file with :vsplit to the right of the browser.
" let g:netrw_browse_split = 4
let g:netrw_altv = 1
set autochdir

 " Toggle Lexplore with Ctrl-E
" map <silent> <C-E> :Lexplore <CR>

" --------------------------------------------------------------------------
" neosnippet
" --------------------------------------------------------------------------
"
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" --------------------------------------------------------------------------
" tagbar
" --------------------------------------------------------------------------

" gotags
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constats',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" --------------------------------------------------------------------------
" undotree
" --------------------------------------------------------------------------
" nnoremap <Leader>u :UndotreeToggle<cr>

" --------------------------------------------------------------------------
" vim-easy-align
" --------------------------------------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)


" --------------------------------------------------------------------------
" vim-go
" --------------------------------------------------------------------------
" By default syntax-highlighting for funcs, methods, structs is disable.
let g:go_highlight_functions         = 1
let g:go_highlight_methods           = 1
let g:go_highlight_structs           = 1
let g:go_highlight_interfaces        = 1
let g:go_highlight_operators         = 1
let g:go_highlight_fields            = 1
let g:go_highlight_types             = 1
let g:go_highlight_build_constraints = 1
let g:go_snippet_engine              = "neosnippet"
let g:go_auto_type_info              = 1
let g:go_fmt_command                 = "goimports"
" play nice with syntastic.
" let g:go_fmt_fail_silently           = 1
" play nice with neosnippet
" let g:go_disable_autoinstall = 1
" let g:go_loaded_gosnippets = 1
" let g:go_term_enabled = 1 " tests open in a neovim terminal
"
"
" --------------------------------------------------------------------------
" neomake
" --------------------------------------------------------------------------
let g:neomake_open_list=2
let g:neomake_shell_enable_makers = ['shellcheck']

" --------------------------------------------------------------------------
" tagbar
" --------------------------------------------------------------------------
nmap <Leader>tag :TagbarToggle<CR>

" =========================================================================
" SETTINGS
" =========================================================================

" --------------------------------------------------------------------------
" vim specific settings that nvim includes by default
" --------------------------------------------------------------------------
if has('vim')
  set autoindent
  set autoread           " reread files that have been changed while open
  set backspace   = indent,eol,start " backspace over line breaks, insertion, start
  set display    += lastline        " display as much as possible of the last line
  set encoding    = utf-8     " the encoding displayed
  set history     = 10000               " increase history level
  set hlsearch                 " highlight search
  set incsearch                " incrementally execute search
  set listchars   = tab:>-,trail:.,extends:#,nbsp:. ",tab:>-,eol:¶ " customize whitespace look
  set nocompatible
  set smarttab   " <Tab> interpretation depends on cursor and siftwidth, tabstop, softtabstop
  set tabpagemax  = 50
  " set tags=""./tags;,tags
  set ttyfast
endif

" --------------------------------------------------------------------------
" Abbreviations
" --------------------------------------------------------------------------
" Abbreviation for date and time stamp in RFC822 format
" iabbrev <expr> dts strftime("%a, %d %b %Y %H:%M:%S %z")
" Abbreviation for ISO 8061 format.
" NOTE: The RFC 3339 format specifies that time-zones be of the form -09:37.
" Some versions of strftime support the %:z format, but not on a
" circa 2016-05-06 OS X machine.
iabbrev <expr> dts strftime("%FT%T%z")

" --------------------------------------------------------------------------
" Buffers & Windows
" --------------------------------------------------------------------------
set hidden      " don't close windowless buffers
set confirm     " get confirmation to discard unwritten buffers
set splitbelow  " open new buffers below
set splitright  " and to the right of the current.  Default is opposite.

" --------------------------------------------------------------------------
" Completion
" --------------------------------------------------------------------------
"  FIXME Fri, 12 Feb 2016 09:40:54 -0800
"  The preview option for completeopt worked weird with neovim and deoplete.
" See https://github.com/zchee/deoplete-go/issues/40
set completeopt+=longest,menuone,noinsert
set completeopt-=preview
set wildmenu                             " command-line completion
set wildmode=list:longest,full           " shell-style completion behavior
" File types to ignore for command-line completion
set wildignore+=*.DS_Store               " OSX folder meta-data file
set wildignore+=.git,.hg,.svn            " version control system files
set wildignore+=*.o,*.obj,*.exe          " compiled object files
set wildignore+=*.jpg,*.gif,*.png,*.jpeg "binary image files
set wildignore+=*.aux,*.out,*.toc,*.pdf  "LaTeX intermediate/output files
set wildignore+=*.pyc                    " python object codes
set wildignore+=*.luac                   " lua byte code
set wildignore+=*.class                  " java/scala class files
set wildignore+=*/target/*               " sbt target directory

" --------------------------------------------------------------------------
" Display
" --------------------------------------------------------------------------
syntax on                    " enable syntax highlighting
" set cursorline               " highlight current line, but slow
set showmode                 " show current mode at bottom of screen
set showcmd                  " show (partial) commands below statusline
" set showmatch                " show matching delimiters
set relativenumber           " show relative line numbers
set number                   " show line number of cursor
" au InsertEnter * :set number " absolute numbers in insert mode
" au InsertLeave * :set rnu    " relative numbers when leaving insert mode
" au FocusLost   * :set nu     " absolute numbers when focus lost
" au FocusGained * :set rnu    " relative numbrers when focus gain
set numberwidth=4            " always make room for 4-digit line numbers
set colorcolumn=79           " show where lines should end
set lazyredraw               " don't redraw unnecessarily during macros etc.
" set tf                       " fast term connection.  Outdated?
" set nowrap                     " do not visually wrap long lines
set linebreak                " don't break words at wrap; disabled by list
" set list                     " show whitespace
set visualbell         " flash screen instead of audio bell for alert
" set visualbell t_vb=         " turn off visualbell effect
" set title                    " update terminal window title
set guifont=SF\ Mono
set shortmess+=A       " don't show warning for existing swapfiles

"For Neovim > 0.1.5 and Vim > patch 7.4.1799
if (has("termguicolors"))
  set termguicolors
endif

" --------------------------------------------------------------------------
" Colorscheme
" --------------------------------------------------------------------------
" TODO: Clean up some of the unused colorschemes.

set background=dark

" base16
" colorscheme base16-solar-flare " brighter solarized, highlight looks bad
" colorscheme base16-materia " background a bit bright
" colorscheme slate " nice default
" colorscheme base16-solarized-dark
" colorscheme base16-spacemacs
" colorscheme base16-onedark
" colorscheme onedark

" One
" NOTE: (2017-06-05) Alacritty renders italics with a gray background.
" let g:one_allow_italics = 1
colorscheme one

" let g:onedark_terminal_italics=0
" colorscheme onedark

" NOTE Fri, 29 Jan 2016 16:13:41 -0800
" Setting background to dark conflicts with the Atom onedark theme.
" Switch between light and dark backgrounds.
map <F10> :let &background = ( &background == "dark"? "light" : "dark" )<CR>

" When running without plugins use the desert colorscheme
" colorscheme desert " a nice dark built-in colorscheme

" --------------------------------------------------------------------------
" Highlighting
" --------------------------------------------------------------------------
" hi clear SpellBad " if set, onedark would not highlight spelling errors
hi SpellBad cterm=underline,bold ctermfg=red
hi Comment cterm=italic

" --------------------------------------------------------------------------
" Editing
" --------------------------------------------------------------------------

set undolevels=1000            " enable many levels of undo
set undofile                   " save undo tree to file for persistent undos
set clipboard+=unnamed         " make yanked text available in system clipboard
set scrolloff=5                " always show n lines above or below cursor
set scrolljump=1               " scroll n lines when the cursor leaves screen
set mouse=a

" File Handling
set nomodeline         " modelines are a security risk
set autowrite          " write when moving to other buffers/windows
set directory=/var/tmp//,/tmp//    "  swap file directory
set backupdir=/var/tmp//,/tmp//    "  backup file directory
set undodir=/var/tmp//,/tmp//      "  undo file directory


" --------------------------------------------------------------------------
" Files (VIM)
" Folding
" --------------------------------------------------------------------------

set foldenable          " default to folding on, can be toggled with 'zi'
set foldlevelstart=99   " open files completely unfolded
set foldnestmax=8       " no more than 8 levels of folds
set foldmethod=indent   " default folding method. syntax method is SLOW.
" set foldcolumn=1        " gutter fold marks


" --------------------------------------------------------------------------
" Indentation
" --------------------------------------------------------------------------
set expandtab  " <Tab> converted to softtabstop # spaces
set tabstop=2  " number of visual spaces per <Tab> character
set softtabstop=2 " number of spaces <Tab> converted to
set shiftwidth=2 " <Tab> converts to this # spaces at beginning of line
" set smartindent " dumbindent?
" set cindent " also dumb?
filetype indent on

" --------------------------------------------------------------------------
" Search
" --------------------------------------------------------------------------
set ignorecase
set smartcase

" --------------------------------------------------------------------------
" STATUSLINE
" --------------------------------------------------------------------------
set laststatus=2        " Always display statusline.
set statusline+=%n\ \|\  " Buffer number.
set statusline+=%F\ \|\       "tail of the filename
set statusline+=%{mode()}  " Current mode.
" set statusline+=%{fugitive#statusline()}  " git branch
set statusline+=%(\ %)%#ModeMsg#%{&paste?'\ PASTE\ ':''}%*  " paste mode
set statusline+=%=              " left/right separator
set statusline+=%{&fenc}\ \|\        " file encoding
set statusline+=%{&ff}\ \|\           "file format
set statusline+=%h              " help file flag
set statusline+=%m              " modified flag
set statusline+=%w              " preview windowflag: [Preview]
set statusline+=%r              " read only flag
set statusline+=%y\ \|\          " filetype
set statusline+=%p%%\ %l:%c " % through file : line num: column num
set statusline+=%#warningmsg#
set statusline+=%*

" hi StatusLine guifg=white guibg=black ctermfg=white ctermbg=black
" hi StatusLine guifg=white guibg=none ctermbg=none ctermfg=white 

" let g:lightline = {
"     \ 'colorscheme': 'neodark',
"     \ 'component': {
"     \     'filename': '%n: %t'
"     \ }
"     \ }

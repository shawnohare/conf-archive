"
"=========================================================================
" .vimrc
" Settings for VIM
"==========================================================================

"==========================================================================
" Initialization
"==========================================================================
let mapleader = "\<Space>"

" Define plugin dir locations
if has('nvim')
  let vimplug = "$XDG_CONFIG_HOME/nvim/autoload/plug.vim"
  let plugged = "$XDG_CONFIG_HOME/nvim/plugged"
else
  let vimplug = "~/.vim/autoload/plug.vim"
  let plugged = "~/.vim/plugged"
endif

"==========================================================================
" Plugins
" Using vim-plug
"==========================================================================

" Auto install vim-plug if it doesn't already exist.
if empty(glob(vimplug))
  execute '!curl -fLo ' . vimplug . ' --create-dirs '
    \ . 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall
endif

call plug#begin(plugged)

" Browsing 
Plug 'tpope/vim-vinegar'  " enhanced netrw file browser
Plug 'majutsushi/tagbar'  " display tags in a window


" Colorscheme
" FIXME: Consider using a colorscheme that looks good without truecolor enabled.
" In particular, nvim in screen looks bad when true color is enabled.
Plug 'joshdick/onedark.vim'
Plug 'joshdick/airline-onedark.vim'
Plug 'chriskempson/base16-vim'
" Plug 'mhartington/oceanic-next' " background too black
" Plug 'zenorocha/dracula-theme', {'rtp': 'vim'}

" 24-bit / True / Hex Colorschemes
" Plug 'geoffharcourt/one-dark.vim' 
Plug 'morhetz/gruvbox'
" Plug 'sts10/vim-mustard'

" Completion
" Plug 'Shougo/neocomplete', {'on': 'NeocompleteOn'}
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
" use '<Tab>' for smart omnicompletions
" Plug 'ervandew/supertab'
" Plug 'SirVer/utilsnips'

" Search and replace
" FIXME: can likely delete easygrep and ctrlp and use vim-ags / fzf.
" Plug 'dkprice/vim-easygrep'   " Fast and easy find/replace across files
" Plug 'kien/ctrlp.vim'          "  full path fuzzy file/buffer/MRU/tag finder
Plug 'gabesoft/vim-ags'        " Fast find/replace across all files.
Plug 'rking/ag.vim'            " Nicer interface than vim-ags.
" fzf subsumes ctrlp
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'


" Editing Enhancement 
" Plug 'mbbill/undotree'         " Visual navigation of VIM undotree
Plug 'tpope/vim-surround'      " Easy handling of surrounding brackets etc.
Plug 'Raimondi/delimitMate'    " Automatic closing of parentheses etc.
Plug 'junegunn/vim-easy-align' " Easy alignment of text blocks
Plug 'tpope/vim-commentary'    " Easy toggling of comment markers
Plug 'tpope/vim-repeat'        " Make vim-surround and vim-commentary repeatable


" Source Code Management Tools
Plug 'tpope/vim-fugitive'      " git integration for VIM
Plug 'airblade/vim-gitgutter'  " display git diffs in the gutter
Plug 'scrooloose/syntastic'    " syntax checking for many languages

" Syntax Highlighting

" Filetype Specific 
" One disadvantage of selective loading is that help files are unavailable
" when working on a different file-type.  This is an minor annoyance when
" configuring a plugin while the init file is open. Most filetype specific
" plugins tend to not load very much initially, so it could be
" advantageous to load all plugins.
" use vim-latex instead?
Plug 'lervag/vimtex' ,       { 'for': 'tex' }
Plug 'derekwyatt/vim-scala', { 'for': 'scala' }
Plug 'fatih/vim-go',         { 'for': 'go' }
Plug 'chrisbra/csv.vim',     { 'for': 'csv' }
Plug 'cespare/vim-toml',     { 'for': 'toml' }
Plug 'mattn/emmet-vim',      { 'for': 'html' } 
Plug 'othree/html5.vim',     { 'for': 'html' }
" lazy-loading the julia-vim plugin causes issues
Plug 'JuliaLang/julia-vim'
" Plug 'ensime/ensime-vim' " had issues getting ensime to work

" Neovim specific plugins
" FIXME: find a better way to separate neovim/vim plugins.  Ideally we do not
" maintain separate files, either.
if has('nvim')
  function! DoRemote(arg)
    UpdateRemotePlugins
  endfunction
  Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
  " Plug 'Shougo/echodoc.vim' " Displaying preview-like info
  Plug 'nsf/gocode', { 'rtp': 'nvim', 'do': '$XDG_CONFIG_HOME/nvim/plugged/gocode/nvim/symlink.sh' }
  Plug 'zchee/deoplete-go', { 'do': 'make' }
  Plug 'zchee/deoplete-jedi'
endif

" Vim only filetype specific plugins
" Some plugins included below not might work in neovim.
if !has('nvim')
  " python-mode seems buggy
  " Plug 'klen/python-mode',     { 'for': 'python'}
endif

" Other
" Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
" Plug 'Shougo/unite.vim'

" Visual
" lightline is similar to airline, but it
" requires more setup in vimrc (e.g., for fugitive integration).
" However, it is orthgonal to other plugins.
" Plug 'itchyny/lightline.vim'  
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Plug 'bling/vim-bufferline'
" Plug 'nathanaelkane/vim-indent-guides'

call plug#end()

" ==========================================================================
" PLUGIN CONFIG
" ==========================================================================

" --------------------------------------------------------------------------
" Airline
" --------------------------------------------------------------------------
" For nice looking powerline symbols.
let g:airline_powerline_fonts = 0
" Automatically display buffers when only one tab is open.
let g:airline#extension#tabline#enabled = 1
 " Show just the file name
let g:airline#extension#tabline#fnamed = ':t' 
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#eclim#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
" let g:airline_theme='onedark'
" let g:airline_theme='gruvbox'

" --------------------------------------------------------------------------
" delimitMate
" --------------------------------------------------------------------------
" pressing return between delimiters results in an indent
let g:delimitMate_expand_cr=2
let g:delimitMate_expand_space=1
let g:delimitMate_jump_expansion=1
" don't expand <cr> in pop-up menus
 imap <expr> <CR> pumvisible() ? "\<C-Y>" : "<Plug>delimitMateCR"

" --------------------------------------------------------------------------
" netrw (built-in)
" --------------------------------------------------------------------------
" let g:netrw_banner    = 0      " Do not display info on top
let g:netrw_liststyle = 3      " default to tree-style file listing
let g:netrw_winsize   = 30     " use 30% of columns for list
let g:netrw_preview   = 1      " default to vertical splitting for preview

" Hit enter in the file browser to open the selected
" file with :vsplit to the right of the browser.
" let g:netrw_browse_split = 4
let g:netrw_altv = 1
" Change directory to the current buffer when opening files.
set autochdir

 " Toggle Lexplore with Ctrl-E
" map <silent> <C-E> :Lexplore <CR>

" --------------------------------------------------------------------------
" ctrlp
" --------------------------------------------------------------------------
if executable("ag")
    " Use Ag in CtrlP for listing files
    let g:ctrlp_user_command = 'ag %s -l --hidden -g ""'

    " Ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
endif


" --------------------------------------------------------------------------
" neosnippet
" --------------------------------------------------------------------------
"
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)


" SuperTab like snippets behavior.
" imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: pumvisible() ? "\<C-n>" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: "\<TAB>"

" " For snippet_complete marker.
" if has('conceal')
"   set conceallevel=2 concealcursor=i
" endif

" --------------------------------------------------------------------------
" supertab
" --------------------------------------------------------------------------
let g:SuperTabDefaultCompletionType = "context"

" --------------------------------------------------------------------------
" tagbar
" --------------------------------------------------------------------------

" gotags
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constats',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" --------------------------------------------------------------------------
" undotree
" --------------------------------------------------------------------------
" nnoremap <Leader>u :UndotreeToggle<cr>

" --------------------------------------------------------------------------
" utilsnips
" --------------------------------------------------------------------------
" Trigger configuration.
" Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

" --------------------------------------------------------------------------
" vim-easy-align
" --------------------------------------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)


" --------------------------------------------------------------------------
" vim-go
" --------------------------------------------------------------------------
" By default syntax-highlighting for funcs, methods, structs is disable.
let g:go_highlight_functions         = 1
let g:go_highlight_methods           = 1
let g:go_highlight_structs           = 1
let g:go_highlight_interfaces        = 1
let g:go_highlight_operators         = 1
let g:go_highlight_fields            = 1
let g:go_highlight_types             = 1
let g:go_highlight_build_constraints = 1
let g:go_snippet_engine              = "neosnippet"
let g:go_auto_type_info              = 1
let g:go_fmt_command                 = "goimports"
" play nice with syntastic.
" let g:go_fmt_fail_silently           = 1
" play nice with neosnippet
" let g:go_disable_autoinstall = 1
" let g:go_loaded_gosnippets = 1
" let g:go_term_enabled = 1 " tests open in a neovim terminal

" --------------------------------------------------------------------------
" syntastic
" --------------------------------------------------------------------------
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statuseine+=%*

" Populate location list  is off by default to prevent classes with airline.
" vim-go sometimes conflicts with syntastic location lists.
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list            = 0
let g:syntastic_check_on_open            = 0
let g:syntastic_check_on_wq              = 0
let g:syntastic_enable_signs             = 1
let g:syntastic_error_symbol             = "✗"
let g:syntastic_warning_symbol           = "⚠"
let g:syntastic_python_python_exec       = "/usr/local/var/pyenv/shims/python"
let g:syntastic_mode_map                 = { "mode": "passive",
            \"active_filetypes": ["haskell", "tex", "ruby"],
            \"passive_filetypes": ["go, scala", "python"]}
let g:syntastic_haskell_checkers         = ['hdevtools', 'hlint']
let g:syntastic_tex_checkers             = ['chktex', 'lacheck']
let g:syntastic_python_checkers          = ['pylint', 'flake8', 'python']
let g:syntastic_ruby_checkers            = ['mri', 'ruby']
let g:syntastic_scala_checkers           = ['scalac', 'scalastyle', 'fsc']
let g:syntastic_markdown_checkers        = ['mdl']

" Pull up syntastic errors easily
nnoremap <Leader>e :Errors<CR>
" Reset syntastic easily in both normal and insert mode
imap <F3> <C-O><F3>
nnoremap <F3> :SyntasticReset<CR>

" --------------------------------------------------------------------------
" tagbar 
" --------------------------------------------------------------------------
nmap <Leader>tag :TagbarToggle<CR>

" --------------------------------------------------------------------------
" vim-indent-guides 
" --------------------------------------------------------------------------
 " let g:indent_guides_start_level = 2
" let g:indent_guides_guide_size  = 1 

" =========================================================================
" SETTINGS
" =========================================================================

" --------------------------------------------------------------------------
" vim specific settings that nvim includes by default 
" --------------------------------------------------------------------------
if has('vim')
  set autoindent
  set autoread           " reread files that have been changed while open
  set backspace   = indent,eol,start " backspace over line breaks, insertion, start
  set display    += lastline        " display as much as possible of the last line
  set encoding    = utf-8     " the encoding displayed
  set history     = 10000               " increase history level
  set hlsearch                 " highlight search
  set incsearch                " incrementally execute search
  set listchars   = tab:>-,trail:.,extends:#,nbsp:. ",tab:>-,eol:¶ " customize whitespace look
  set nocompatible  " make VIM iMproved rather than legacy compatible
  set smarttab   " <Tab> interpretation depends on cursor and siftwidth, tabstop, softtabstop
  set tabpagemax  = 50
  " set tags=""./tags;,tags
  set ttyfast
endif

" --------------------------------------------------------------------------
" Abbreviations
" --------------------------------------------------------------------------
" Abbreviation for date and time stamp in RFC822 format
" iabbrev <expr> dts strftime("%a, %d %b %Y %H:%M:%S %z")
" Abbreviation for ISO 8061 format.
" NOTE: The RFC 3339 format specifies that time-zones be of the form -09:37.
" Some versions of strftime support the %:z format, but not on a
" circa 2016-05-06 OS X machine. 
iabbrev <expr> dts strftime("%FT%T%z")

" --------------------------------------------------------------------------
" Buffers & Windows
" --------------------------------------------------------------------------
set hidden      " don't close windowless buffers
set confirm     " get confirmation to discard unwritten buffers
set splitbelow  " open new buffers below
set splitright  " and to the right of the current.  Default is opposite.

" --------------------------------------------------------------------------
" Completion
" --------------------------------------------------------------------------
"  FIXME Fri, 12 Feb 2016 09:40:54 -0800 
"  The preview option for completeopt worked weird with neovim and deoplete.
" See https://github.com/zchee/deoplete-go/issues/40
set completeopt+=longest,menuone,noinsert
set completeopt-=preview
set wildmenu                             " command-line completion
set wildmode=list:longest,full           " shell-style completion behavior
" File types to ignore for command-line completion
set wildignore+=*.DS_Store               " OSX folder meta-data file
set wildignore+=.git,.hg,.svn            " version control system files
set wildignore+=*.o,*.obj,*.exe          " compiled object files
set wildignore+=*.jpg,*.gif,*.png,*.jpeg "binary image files
set wildignore+=*.aux,*.out,*.toc,*.pdf  "LaTeX intermediate/output files
set wildignore+=*.pyc                    " python object codes
set wildignore+=*.luac                   " lua byte code
set wildignore+=*.class                  " java/scala class files
set wildignore+=*/target/*               " sbt target directory

" --------------------------------------------------------------------------
" Display
" --------------------------------------------------------------------------
syntax on                    " enable syntax highlighting
" set cursorline               " highlight current line, but slow
set showmode                 " show current mode at bottom of screen
set showcmd                  " show (partial) commands below statusline
" set showmatch                " show matching delimiters
set relativenumber           " show relative line numbers
set number                   " show line number of cursor
" au InsertEnter * :set number " absolute numbers in insert mode
" au InsertLeave * :set rnu    " relative numbers when leaving insert mode
" au FocusLost   * :set nu     " absolute numbers when focus lost
" au FocusGained * :set rnu    " relative numbrers when focus gain
set numberwidth=4            " always make room for 4-digit line numbers
set colorcolumn=79           " show where lines should end
set lazyredraw               " don't redraw unnecessarily during macros etc.
" set tf                       " fast term connection.  Outdated?
" set nowrap                     " do not visually wrap long lines
set linebreak                " don't break words at wrap; disabled by list
"  set list                     " show whitespace
set visualbell         " flash screen instead of audio bell for alert
" set visualbell t_vb=         " turn off visualbell effect
" set title                    " update terminal window title
set guifont=Source\ Code\ Pro\ for\ Powerline
set shortmess+=A       " don't show warning for existing swapfiles

" --------------------------------------------------------------------------
" Colors 
" --------------------------------------------------------------------------

" FIXME: if termguicolors is set, an nvim session invoked in screen has
" imporper colors. Truecolor support for screen currently
" 2016-08-01T10:17:45-0700 exists in a master branch, but as of v4.4 has
" not been included in a release.
if has('termguicolors')
  set termguicolors " enable 24-bit colors in terminal
endif
"
" --------------------------------------------------------------------------
" Colorscheme
" --------------------------------------------------------------------------

set background=dark
colorscheme base16-solar-flare " nice default
" colorscheme slate " nice default
" Pre colorscheme invocation.
" Colorscheme invocation
" Post colorscheme invocation.

" let base16colorspace=256
" colorscheme base16-default
" colorscheme base16-tomorrow
" colorscheme base16-twilight
" colorscheme base16-railscast
" colorscheme base16-solarized-dark
" colorscheme base16-spacemacs


" Dracula
" colorscheme dracula

" Mustard
" NOTE: Thu, 18 Feb 2016 08:46:57 -0800 A bit washed out
" set background=dark
" colorscheme mustard

" One Dark (Atom) theme (https://github.com/joshdick/onedark.vim)
" let g:onedark_terminal_italics=0
" colorscheme onedark

" One Dark (Atom) theme (https://github.com/geoffharcout/one-dark.vim)
" NOTE: Cannot load this and joshdick's onedark theme simultaneously.
" colorscheme onedark

" Oceanic Next
" colorscheme OceanicNext
" set background=dark

"
" Gruvbox 
" set background=dark
" let g:gruvbox_contrast_light="hard"
" let g:gruvbox_italic=1
let g:gruvbox_italicize_comments=1
" let g:gruvbox_improved_strings=1
let g:gruvbox_improved_warnings=1
let g:gruvbox_sign_column="bg0"
" colorscheme gruvbox

" NOTE Fri, 29 Jan 2016 16:13:41 -0800
" Setting background to dark conflicts with the Atom onedark theme.
" Switch between light and dark backgrounds.
map <F10> :let &background = ( &background == "dark"? "light" : "dark" )<CR>

" When running without plugins use the desert colorscheme
" colorscheme desert " a nice dark built-in colorscheme

" --------------------------------------------------------------------------
" Cursor 
" --------------------------------------------------------------------------
"" Use a blinking upright bar cursor in Insert mode, a blinking block in normal
" if &term == 'xterm-256color' || &term == 'screen-256color'
"     let &t_SI = "\<Esc>[5 q"
"     let &t_EI = "\<Esc>[1 q"
" endif

" if exists('$TMUX')
"     let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
"     let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
" endif

" --------------------------------------------------------------------------
" Highlighting 
" --------------------------------------------------------------------------
" hi clear SpellBad " if set, onedark would not highlight spelling errors
hi SpellBad cterm=underline,bold ctermfg=red
" Print comments in italic font. Only appears to work for vim (not neovim).
" let &t_ZH="\e[3m"
" let &t_ZR="\e[23m"
hi Comment cterm=italic  

" --------------------------------------------------------------------------
" Editing
" --------------------------------------------------------------------------

set undolevels=1000            " enable many levels of undo
set undofile                   " save undo tree to file for persistent undos
set clipboard+=unnamed         " make yanked text available in system clipboard
set scrolloff=5                " always show n lines above or below cursor
set scrolljump=1               " scroll n lines when the cursor leaves screen
set mouse=a


" --------------------------------------------------------------------------
" File Handling
" --------------------------------------------------------------------------

set nomodeline         " modelines are a security risk
set autowrite          " write when moving to other buffers/windows


" --------------------------------------------------------------------------
" Files (VIM)
" --------------------------------------------------------------------------

set directory=/var/tmp//,/tmp//    "  swap file directory
set backupdir=/var/tmp//,/tmp//    "  backup file directory
set undodir=/var/tmp//,/tmp//      "  undo file directory


" --------------------------------------------------------------------------
" Files (VIM)
" Folding
" --------------------------------------------------------------------------

set foldenable          " default to folding on, can be toggled with 'zi'
set foldlevelstart=99   " open files completely unfolded
set foldnestmax=8       " no more than 8 levels of folds
set foldmethod=indent   " default folding method. syntax method is SLOW.
" set foldcolumn=1        " gutter fold marks


" --------------------------------------------------------------------------
" Indentation
" --------------------------------------------------------------------------
set expandtab  " <Tab> converted to softtabstop # spaces
set tabstop=2  " number of visual spaces per <Tab> character
set softtabstop=2 " number of spaces <Tab> converted to
set shiftwidth=2 " <Tab> converts to this # spaces at beginning of line
" set smartindent " dumbindent?
" set cindent " also dumb?
filetype indent on
" indent when between delimeters by typing <C-Return>
" Now using delimitMate to handle this.
" imap <C-Return> <CR><CR><C-o>k<C-t>
"
" --------------------------------------------------------------------------
" Search 
" --------------------------------------------------------------------------
set ignorecase
set smartcase

" --------------------------------------------------------------------------
" STATUSLINE
" --------------------------------------------------------------------------
" FIXME: is this all over-ridden by airline?
" set laststatus=2
" set statusline=%t       "tail of the filename
" set statusline+=[%{strlen(&fenc)?&fenc:'none'} "file encoding
" set statusline+=%{&ff}]         "file format
" set statusline+=%h              " help file flag
" set statusline+=%m              " modified flag
" set statusline+=%r              " read only flag
" set statusline+=%y              " filetype
" set statusline+=%=              " left/right separator
" set statusline+=%P\ :\ %l:\ %c " % through file : line num: column num
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" --------------------------------------------------------------------------
" Syntax Highlighting 
" --------------------------------------------------------------------------

" --------------------------------------------------------------------------
" Various
" --------------------------------------------------------------------------

" inoremap ;; <Esc>

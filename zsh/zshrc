###
# Main zsh  config file
# Last modified Mon, 08 Dec 2014 10:27:53 -0800  
###

###
#  Lines configured by zsh-newuser-install
##

# TODO eventually integrate appropriate subsections
setopt autocd extendedglob nomatch notify
bindkey -v
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
#zstyle :compinstall filename '/Users/shawn/.zshrc'
# End of lines added by compinstall

##
# Antigen
##

# source ~/antigen.zsh
# antigen bundle zsh-users/zsh-syntax-highlighting
# antigen bundle zsh-users/zsh-history-substring-search
# #antigen bundle tarruda/zsh-autosuggestions
# antigen apply

##
# Color
##

# All of these settings enable consistent coloring of the most frequently
# used parts of the CLI. For historical reasons 'ls', 'less', 'grep', and
# the completion menu all require separate color settings.

# Enable command line color
export CLICOLOR=1
# Define colors for the 'ls' command on BSD/Darwin
export LSCOLORS='exfxcxdxbxGxDxabagacad'
# Define colors for the zsh completion system
export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=36;01:cd=33;01:su=31;40;07:sg=36;40;07:tw=32;40;07:ow=33;40;07:'

# The pager 'less' (the default pager for man-pages) depends on
# the (obsolete) TERMCAP library for color capabilities. Exporting
# the following parameters provides for colored man-page display.
export LESS_TERMCAP_mb=$'\E[01;31m'    # begins blinking = LIGHT_RED
export LESS_TERMCAP_md=$'\E[0;34m'     # begins bold = BLUE
export LESS_TERMCAP_me=$'\E[0m'        # ends mode = NO_COLOR
export LESS_TERMCAP_se=$'\E[0m'        # ends standout-mode = NO_COLOR
export LESS_TERMCAP_so=$'\E[00;47;30m' # begins standout-mode = REVERSE_WHITE
export LESS_TERMCAP_ue=$'\E[0m'        # ends underline = NO_COLOR
export LESS_TERMCAP_us=$'\E[01;32m'    # begins underline = LIGHT_GREEN

# The following provide color highlighing by default for GREP
# export GREP_COLOR='37;45'
export GREP_OPTIONS='--color=auto'

##
# Completion (derived from http://dustri.org/b/my-zsh-configuration.html)
##

autoload -U compinit
compinit
zmodload -i zsh/complist
setopt hash_list_all            # hash everything before completion
setopt completealiases          # complete alisases
setopt always_to_end            # when completing from the middle of a word, move the cursor to the end of the word    
setopt complete_in_word         # allow completion from within a word/phrase
setopt correct                  # spelling correction for commands
setopt list_ambiguous           # complete as much of a completion until it gets ambiguous.

zstyle ':completion::complete:*' use-cache on               # completion caching, use rehash to clear
zstyle ':completion:*' cache-path ~/.zsh/cache              # cache path
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'   # ignore case
zstyle ':completion:*' menu select=2                        # menu if nb items > 2
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}       # colorz !
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate # list of completers to use

# sections completion !
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format $'\e[00;34m%d'
zstyle ':completion:*:messages' format $'\e[00;31m%d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:manuals' separate-sections true

zstyle ':completion:*:processes' command 'ps -au$USER'
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always
zstyle ':completion:*:*:kill:*:processes' list-colors "=(#b) #([0-9]#)*=29=34"
zstyle ':completion:*:*:killall:*' menu yes select
zstyle ':completion:*:killall:*' force-list always
users=(jvoisin root)           # because I don't care about others
zstyle ':completion:*' users $users

#generic completion with --help
compdef _gnu_generic gcc
compdef _gnu_generic gdb

##
# Exports
##
 
export EDITOR="vim"
export VISUAL="vim"

##
# History
##

HISTFILE=~/.zsh_history         # where to store zsh config
HISTSIZE=2048                   # big history
SAVEHIST=2048                   # big history
setopt append_history           # append
setopt hist_ignore_all_dups     # no duplicate
unsetopt hist_ignore_space      # ignore space prefixed commands
setopt hist_reduce_blanks       # trim blanks
setopt hist_verify              # show before executing history commands
setopt inc_append_history       # add commands as they are typed, don't wait until shell exit 
setopt share_history            # share hist between sessions
setopt bang_hist                # !keyword

##
# ITERM 2 SETUP
##
# based off of https://gist.github.com/capotej/4320967
# for displaying more info in iterms title/tab bars

function set_title_tab {
    function settab   {
        # file settab  -- invoked only if iTerm or Konsole is running
        #  Set iterm window tab to current directory and penultimate directory if the
        #  shell process is running.  Truncate to leave the rightmost $rlength characters.
        #  Use with functions settitle (to set iterm title bar to current directory)
        #  and chpwd
    if [[ $TERM_PROGRAM == iTerm.app && -z "$KONSOLE_DCOP_SESSION" ]];then
      # The $rlength variable prints only the 20 rightmost characters. Otherwise iTerm truncates
      # what appears in the tab from the left.
        # Chage the following to change the string that actually appears in the tab:
          tab_label="$PWD:h:t/$PWD:t"
          rlength="20"   # number of characters to appear before truncation from the left
                echo -ne "\e]1;${(l:rlength:)tab_label}\a"
    else
        # For KDE konsole tabs
        # Chage the following to change the string that actually appears in the tab:
          tab_label="$PWD:h:t/$PWD:t"
          rlength="20"   # number of characters to appear before truncation from the left
            # If we have a functioning KDE console, set the tab in the same way
            if [[ -n "$KONSOLE_DCOP_SESSION" && ( -x $(which dcop)  )  ]];then
                    dcop "$KONSOLE_DCOP_SESSION" renameSession "${(l:rlength:)tab_label}"
            else
                : # do nothing if tabs don't exist
            fi
    fi
  }
 
    function settitle   {
    # Function "settitle"  --  set the title of the iterm title bar. use with chpwd and settab
    # Change the following string to change what appears in the Title Bar label:
      title_lab=$HOST:r:r::$PWD
        # Prints the host name, two colons, absolute path for current directory
      # Change the title bar label dynamically:
      echo -ne "\e]2;[zsh]   $title_lab\a"
  }
  # Set tab and title bar dynamically using above-defined functions
    function title_tab_chpwd { settab ; settitle }
    # Now we need to run it:
      title_tab_chpwd
  # Set tab or title bar label transiently to the currently running command
  if [[ "$TERM_PROGRAM" == "iTerm.app" ]];then
    function title_tab_preexec {  echo -ne "\e]1; $(history $HISTCMD | cut -b7- ) \a"  }
    function title_tab_precmd  { settab }
  else
    function title_tab_preexec {  echo -ne "\e]2; $(history $HISTCMD | cut -b7- ) \a"  }
    function title_tab_precmd  { settitle }
  fi
  # Use reserved named arrays instead of special functions if the ZSH version is 4.3.4 or above
    typeset -ga preexec_functions
    preexec_functions+=title_tab_preexec
    typeset -ga precmd_functions
    precmd_functions+=title_tab_precmd
    typeset -ga chpwd_functions
    chpwd_functions+=title_tab_chpwd
  # Otherwise we need to do this for older versions of zsh:
    if [[ $ZSH_VERSION < 4.3.4 ]];then
      function preexec { $preexec_functions }
      function precmd  { $precmd_functions  }
      function  chpwd  { $chpwd_functions   }
    fi
}
 
####################
 
set_title_tab
##
# PROMPT
##

setopt PROMPT_SUBST      # allow for more extensive expansion in prompts
setopt TRANSIENT_RPROMPT # right prompt does not persist
# hostname: cwd [exit status] %

autoload -Uz vcs_info

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:git:*' formats '%u%c%{%F{green}%}[%b]%{%f%} '
zstyle ':vcs_info:git:*' stagedstr '%{%F{yellow}%}+%{%f%}'
zstyle ':vcs_info:git:*' unstagedstr '%{%F{red}%}*%{%f%}'
precmd() {
  vcs_info
}

PROMPT='%{%F{yellow}%}>%{%f%} '        # prompt indicator
PROMPT+='%{%F{blue}%}%1~%{%f%} '        # current directory
# PROMPT+='%(?..%{%F{yellow}%}%? '     # exit codes 
PROMPT+='${vcs_info_msg_0_}'           # git info
PROMPT+='%{$%} '                       # $ indicator
RPROMPT='%*'                           # time and date

##
# Modules installed by homebrew
##

source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/local/opt/zsh-history-substring-search/zsh-history-substring-search.zsh

##
# Module setup for zsh-autosuggestions
##

# had some issues with this mod playing nice with history-substring-search
#zle-line-init() {
#    zle autosuggest-start
#  }
#zle -N zle-line-init
#export AUTOSUGGESTION_HIGHLIGHT_COLOR=fg=246


##
# Module setup for zsh-completions
##

fpath=(/usr/local/share/zsh-completions $fpath)

##
# Module setup for zsh-history-substring-search
##

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

##
# Module setup for zsh-syntax-highlighting
##

# Tries to be Solarized-ish
# 166 = orange
# Enable highlighters
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)
# brackets
ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=blue'
ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=166'
ZSH_HIGHLIGHT_STYLES[bracket-level-3]='fg=yellow'
ZSH_HIGHLIGHT_STYLES[bracket-level-4]='fg=magenta'
# cursor
ZSH_HIGHLIGHT_STYLES[cursor]='bg=black'
# main
# default & unknown
ZSH_HIGHLIGHT_STYLES[default]=none
ZSH_HIGHLIGHT_STYLES[unknown-token]='fg=red'
# command
ZSH_HIGHLIGHT_STYLES[reserved-word]='fg=yellow'
ZSH_HIGHLIGHT_STYLES[alias]='fg=yellow'
ZSH_HIGHLIGHT_STYLES[builtin]='fg=green'
ZSH_HIGHLIGHT_STYLES[function]='fg=166'
ZSH_HIGHLIGHT_STYLES[command]='fg=green'
ZSH_HIGHLIGHT_STYLES[precommand]='fg=violet'
ZSH_HIGHLIGHT_STYLES[commandseparator]=none
ZSH_HIGHLIGHT_STYLES[hashed-command]='fg=blue'
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]='fg=yellow'
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]='fg=yellow'
# path
ZSH_HIGHLIGHT_STYLES[path]='fg=blue'
ZSH_HIGHLIGHT_STYLES[path_prefix]='fg=61'
ZSH_HIGHLIGHT_STYLES[path_approx]='fg=magenta'
# shell
ZSH_HIGHLIGHT_STYLES[globbing]='fg=166'
ZSH_HIGHLIGHT_STYLES[history-expansion]='fg=blue'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=cyan
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=009
ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=009
ZSH_HIGHLIGHT_STYLES[assign]='fg=magenta'
# quotes
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]='fg=cyan'
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]='fg=cyan'


##
# Sourcing
##

source $HOME/.aliases
source $HOME/.profile

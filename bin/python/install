#!/usr/bin/env bash
#
# TODO:
# - [ ] Clone and run scripts rather than curl and pipe.
# - [ ] Try and put more of this into the main Makefile.
# = [ ] Might only need to install one python provider for neovim
# = [ ] Consider only installing version 3 for user / python. Python 2
#       versions required for old codebases can be installed manually.

# Default location for pyenv.  This is overriden by ~/.profile.
PYENV_ROOT="${PYENV_ROOT:-${HOME}/.pyenv}"
readonly versions="${PYENV_ROOT}/versions"
# readonly versions=("3.7.0" "2.7.15")
# readonly venvs=(neovim user)  # Venvs to install in each major version.
# python was sunset in 2020-01-01, and  2.7.18 is the last release.
readonly ver2="2.7.18"
readonly ver3="3.8.3"
readonly python2_root="${versions}/${ver2}"
readonly python3_root="${versions}/${ver3}"
readonly python2_venvs="${python2_root}/envs"
readonly python3_venvs="${python3_root}/envs"
readonly user2_root="${python2_venvs}/user2"
readonly user3_root="${python3_venvs}/user3"
readonly neovim2_root="${python2_venvs}/neovim2"
readonly neovim3_root="${python3_venvs}/neovim3"
readonly python2="${python2_root}/bin/python"
readonly python3="${python3_root}/bin/python"

# Binaries to install in isolated environments:
readonly bins=("python-language-server" "black")

# Define python virtualenv requirements. The base requirements in `requirements_common` are installed in every environment.
readonly requirements_common=("pip" "setuptools")
readonly requirements_user2=("ipython")
readonly requirements_user3=("ipython" "pipx")
readonly requirements_neovim2=("pynvim")
readonly requirements_neovim3=("pynvim")


install_pyenv() {
    if [ ! -e "${PYENV_ROOT}/bin/pyenv" ]; then
        echo "Installing pyenv."
        curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
    fi
}

# Install a particular version $1 of python.
install_python() {
    if [ ! -e "${versions}/$1/bin/python" ]; then
        pyenv install "$1"
    fi
}

# Install global python executables. Each in their own virtualenv.
install_bins() {
    # FIXME: This appears buggy. pipx not found.
    "${versions}/${ver3}/envs/user3/bin/pip" install -U pipx

    for pkg in "${bins[@]}"; do
        pipx install "${pkg}"
    done
}

# Create a python $1 virtualenv named $2.
virtualenv() {
    echo "Installing $1 $2"

    local bin="${versions}/$1/envs/$2/bin"

    # Remove the eponymous venv that might have a different minor version.
    if [ ! -e "${bin}/python" ]; then
        pyenv uninstall --force "$2"
        pyenv virtualenv "$1" "$2"
    fi

    local requirements="requirements_${2}[@]"
    "${bin}/pip" install -U "${requirements_common[@]}" "${!requirements}"

}


# Create virtualenvs for user-space and applications (e.g., neovim).
setup_venvs() {
    for ver in "${ver2}" "${ver3}"; do
        local major="${ver:0:1}"
        install_python "${ver}"
        virtualenv "${ver}" "user${major}"
        virtualenv "${ver}" "neovim${major}"
    done
}

main() {
    install_pyenv
    setup_venvs
    pyenv global "user3" "user2" "system"
    # install_bins
}

main "$@"

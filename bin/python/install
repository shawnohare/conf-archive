#!/usr/bin/env bash
#
# TODO:
# - [ ] Clone and run scripts rather than curl and pipe.
# - [ ] Try and put more of this into the main Makefile.

# Default location for pyenv.  This is overriden by ~/.profile.
PYENV_ROOT="${PYENV_ROOT:-${XDG_OPT_HOME}/pyenv}"
# readonly versions=("3.7.0" "2.7.15")
# readonly venvs=(neovim user)  # Venvs to install in each major version.
readonly ver2="2.7.18"
readonly ver3="3.8.3"
readonly python2="${PYENV_ROOT}/versions/${ver2}/bin/python"
readonly python3="${PYENV_ROOT}/versions/${ver3}/bin/python"

# Binaries to install in isolated environments:
readonly bins=("python-language-server" "black")

# Define python virtualenv requirements. The base requirements in `requirements_common` are installed in every environment.
readonly requirements_common=("pip" "setuptools")
readonly requirements_user2=("ipython")
readonly requirements_user3=("ipython")
readonly requirements_neovim2=("pynvim")
readonly requirements_neovim3=("pynvim")

install_pyenv() {
    if [ ! -e "${PYENV_ROOT}/bin/pyenv" ]; then
        echo "Installing pyenv."
        curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
    fi
}

# Install a particular version $1 of python.
install_python() {
    if [ ! -e "${PYENV_ROOT}/versions/$1/bin/python" ]; then
        pyenv install "$1"
    fi
}

# NOTE: pipsi is not really well maintained it seems. pipx is an alternative.
install_pipsi() {
    if [ ! -e "${XDG_BIN_HOME}/pipsi" ]; then
        curl https://raw.githubusercontent.com/mitsuhiko/pipsi/master/get-pipsi.py | "${python3}" - --no-modify-path
    fi
}

# Install global python executables. Each in their own virtualenv.
install_bins() {
    "${PYENV_ROOT}/versions/${ver3}/envs/user3/bin/pip" install -U pipx

    for pkg in "${bins[@]}"; do
        pipx install "${pkg}"
    done
}

# Create a python $1 virtualenv named $2.
virtualenv() {
    echo "Installing $1 $2"

    local bin="${PYENV_ROOT}/versions/$1/envs/$2/bin"

    # Remove the eponymous venv that might have a different minor version.
    if [ ! -e "${bin}/python" ]; then
        pyenv uninstall --force "$2"
        pyenv virtualenv "$1" "$2"
    fi

    local requirements="requirements_${2}[@]"
    "${bin}/pip" install -U "${requirements_common[@]}" "${!requirements}"

}

# Create virtualenvs for user-space and applications (e.g., neovim).
setup_venvs() {
    for ver in "${ver2}" "${ver3}"; do
        local major="${ver:0:1}"
        install_python "${ver}"
        virtualenv "${ver}" "user${major}"
        virtualenv "${ver}" "neovim${major}"
    done
}

main() {
    install_pyenv
    setup_venvs
    pyenv global "user3" "user2" "system"
    install_bins
}

main "$@"
